import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
import { store, reserveNextEntityId } from './store';
import useEntity from './useEntity';
export var createSetState = function createSetState(entity, beforeSetState) {
  return function (updates, updaterArg) {
    if (typeof updates === 'function') updates = updates(entity.state, updaterArg);
    if (typeof beforeSetState === 'function') beforeSetState(entity.state, updates);
    entity.state = _extends({}, entity.state, {}, updates);

    for (var i = 0; i < entity.subscribers.length; i++) {
      if (typeof entity.subscribers[i] === 'function') entity.subscribers[i](entity.state);
    } // Cleanup any nullified subscribers due to possible
    // component unmounts caused by this app state change


    for (var _i = 0; _i < entity.subscribers.length; _i++) {
      if (typeof entity.subscribers[_i] !== 'function') entity.subscribers.splice(_i, 1);
    }
  };
};
export var bindActions = function bindActions(actions, entity, deps) {
  var entityActions = {};

  for (var key in actions) {
    if (typeof actions[key] === 'function') {
      var action = actions[key](entity, deps);
      if (typeof action !== 'function') throw new Error('Action must be defined using higher-order function.');
      entityActions[key] = action;
    }
  }

  return entityActions;
};
export var createEntity = function createEntity(_ref, deps) {
  var initialState = _ref.initialState,
      _ref$options = _ref.options,
      options = _ref$options === void 0 ? {} : _ref$options,
      actions = _objectWithoutPropertiesLoose(_ref, ["initialState", "options"]);

  var id = reserveNextEntityId();
  var entity = store[id] = {
    state: initialState || {},
    initialState: initialState,
    subscribers: [],
    reset: function reset() {
      entity.state = initialState;
    }
  };
  entity.setState = createSetState(entity, options.beforeSetState);
  entity.actions = bindActions(actions, entity, deps);
  return entity;
};
export var makeEntity = function makeEntity(definition, deps) {
  var entity = createEntity(definition, deps);
  return function (selector, equalityFn) {
    return useEntity(entity, selector, equalityFn);
  };
};
export default makeEntity;