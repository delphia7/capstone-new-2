"use strict";

exports.__esModule = true;
exports["default"] = exports.useEntity = void 0;

var _react = require("react");

var _utils = require("./utils");

var useEntity = function useEntity(entity, selector, equalityFn) {
  if (selector === void 0) {
    selector = _utils.selectAll;
  }

  if (equalityFn === void 0) {
    equalityFn = _utils.strictEqual;
  }

  var selected = selector(entity.state);

  var _useState = (0, _react.useState)(selected),
      state = _useState[0],
      setState = _useState[1];

  var subscriberFn = (0, _react.useCallback)(function (newState) {
    var newSelected = selector(newState);
    var hasChanged = !equalityFn(state, newSelected);
    if (hasChanged) setState(newSelected);
  }, [selector, equalityFn]);
  (0, _react.useEffect)(function () {
    entity.subscribers.push(subscriberFn);
    return function () {
      for (var i = 0, c = entity.subscribers.length; i < c; i++) {
        if (entity.subscribers[i] === subscriberFn) {
          // Avoid causing subscribers array items to shift at this point.
          // The subscriber invocation loop in entity (see makeEntity.js)
          // should do the cleanup instead.
          // Was: entity.subscribers.splice(i, 1);
          entity.subscribers[i] = null;
          break;
        }
      }
    };
  }, [subscriberFn]);
  return [selected, entity.actions];
};

exports.useEntity = useEntity;
var _default = useEntity;
exports["default"] = _default;